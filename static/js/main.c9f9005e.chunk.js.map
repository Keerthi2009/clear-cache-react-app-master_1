{"version":3,"sources":["logo.svg","ClearCache.js","App.js","utils/utils.js","serviceWorker.js","index.js"],"names":["module","exports","withClearCache","ClearCacheComponent","Component","props","useState","isLatestBuildDate","setIsLatestBuildDate","useEffect","fetch","then","response","json","meta","latestDate","currentDate","momLatestDateTime","moment","momCurrentDateTime","isAfter","buildDateGreaterThan","buildDate","packageJson","refreshCacheAndReload","caches","keys","names","name","delete","window","location","reload","Fragment","className","src","logo","alt","epoch","format","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"s+BAAAA,EAAOC,QAAU,IAA0B,kC,yNC8D5BC,ICvDTC,EDQN,SAAwBC,GA4CtB,OA3CA,SAA6BC,GAC3B,MAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KAEAC,qBAAU,WACRC,MAAM,cACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,IAlBc,SAACC,EAAYC,GACxC,IAAMC,EAAoBC,IAAOH,GAC3BI,EAAqBD,IAAOF,GAElC,QAAIC,EAAkBG,QAAQD,IAkBKE,CAHDP,EAAKQ,UACJC,EAAYD,YAOrCd,GAAqB,GACrBgB,KAEAhB,GAAqB,QAG1B,IAEH,IAAMgB,EAAwB,WACxBC,QAEFA,OAAOC,OAAOf,MAAK,SAACgB,GAAW,IAAD,gBACTA,GADS,IAC5B,2BAA0B,CAAC,IAAhBC,EAAe,QACxBH,OAAOI,OAAOD,IAFY,kCAOhCE,OAAOC,SAASC,QAAO,IAGzB,OACE,kBAAC,IAAMC,SAAP,KACG1B,EAAoB,kBAACH,EAAcC,GAAY,OC/C5BH,EAM5B,SAAiBG,GACf,OACE,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2CCZqBC,EDYQf,EAAYD,UCX7BJ,IAAOoB,GAAOC,OAAO,sBDYjC,8BCboB,IAACD,KDsBdE,MAnBf,WACE,OAAO,kBAAC,EAAD,OEEHC,EAAcC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnC,MAAK,SAAAwC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,IAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,IAAN,sBAEP7B,IAgEV,SAAiCK,EAAOC,GAEtCrC,MAAMoC,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5B/D,MAAK,SAAAC,GAEJ,IAAM+D,EAAc/D,EAAS8D,QAAQE,IAAI,gBAEnB,MAApBhE,EAASiE,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAMpE,MAAK,SAAAwC,GACjCA,EAAa6B,aAAarE,MAAK,WAC7BmB,OAAOC,SAASC,eAKpBa,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAMpE,MAAK,WACjC+C,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.c9f9005e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\nimport packageJson from \"../package.json\";\nimport moment from \"moment\";\n\nconst buildDateGreaterThan = (latestDate, currentDate) => {\n  const momLatestDateTime = moment(latestDate);\n  const momCurrentDateTime = moment(currentDate);\n\n  if (momLatestDateTime.isAfter(momCurrentDateTime)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nfunction withClearCache(Component) {\n  function ClearCacheComponent(props) {\n    const [isLatestBuildDate, setIsLatestBuildDate] = useState(false);\n\n    useEffect(() => {\n      fetch(\"/meta.json\")\n        .then((response) => response.json())\n        .then((meta) => {\n          const latestVersionDate = meta.buildDate;\n          const currentVersionDate = packageJson.buildDate;\n\n          const shouldForceRefresh = buildDateGreaterThan(\n            latestVersionDate,\n            currentVersionDate\n          );\n          if (shouldForceRefresh) {\n            setIsLatestBuildDate(false);\n            refreshCacheAndReload();\n          } else {\n            setIsLatestBuildDate(true);\n          }\n        });\n    }, []);\n\n    const refreshCacheAndReload = () => {\n      if (caches) {\n        // Service worker cache should be cleared with caches.delete()\n        caches.keys().then((names) => {\n          for (const name of names) {\n            caches.delete(name);\n          }\n        });\n      }\n      // delete browser cache and hard reload\n      window.location.reload(true);\n    };\n\n    return (\n      <React.Fragment>\n        {isLatestBuildDate ? <Component {...props} /> : null}\n      </React.Fragment>\n    );\n  }\n\n  return ClearCacheComponent;\n}\n\nexport default withClearCache;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport packageJson from \"../package.json\";\nimport { getBuildDate } from \"./utils/utils\";\nimport withClearCache from \"./ClearCache\";\n\nconst ClearCacheComponent = withClearCache(MainApp);\n\nfunction App() {\n  return <ClearCacheComponent />;\n}\n\nfunction MainApp(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Build date: {getBuildDate(packageJson.buildDate)}</p>\n        <p>\n          {/* App:{process.env.REACT_APP_NAME} version:\n          {process.env.REACT_APP_VERSION} */}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import moment from \"moment\";\n\n/**\n * Function returning the build date(as per provided epoch)\n * @param epoch Time in milliseconds\n */\nexport const getBuildDate = (epoch) => {\n  const buildDate = moment(epoch).format(\"DD-MM-YYYY HH:MM\");\n  return buildDate;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}